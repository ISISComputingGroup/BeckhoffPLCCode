<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="MAIN" Id="{0ea98677-ea3a-4346-a22a-d9ad819fe0c1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	//axes			:	ARRAY [1..GVL.axisNumMax] OF AxisControl;
	
	//Simulate virtual axes
	simulated		:	ARRAY [1..GVL.axisNumMax] OF ST_SimulateStage;
	bSimulate		:	ARRAY [1..GVL.axisNumMax] OF BOOL;	//Do we want to simulate?
	
	//{attribute 'OPC.UA.DA' := '0'}
	drives			:	ARRAY [1..GVL.axisNumMax] OF AxDriveFB;	
	
	bDisableMC		:	BOOL; //boolean control if true the motion control application specific code is disabled - dumb box
	iState			:	UINT;	//state machine index-

	//Outputs that are set in the hmi and wired to power axis limit switches. Currently not confugred in any of the programme.
	limitEnable1	AT %Q*	: BOOL;
	limitEnable2	AT %Q*	: BOOL;	
	i: UINT;	
	
	
	//HMI VARIABLES	
	hmiAxisSelect	:	UINT:=1;
	//hmiAxis			:	AxisControl:=axes[hmiAxisSelect];
	hmiMasterSelect	:	UINT:=1;
	hmiMasterSelect1	:	UINT:=1;
	hmiMasterSelect2	:	UINT:=1;
	hmiMasterSelect3	:	UINT:=1;
	hmiMasterSelect4	:	UINT:=1;
	
	
	
	
	
////////////////////////////////////
//BECKHOFF ADVANCED HOMING WIP VARIABLES

	StartHoming							: BOOL;
	FinishHoming	:BOOL;
	Enable	:	BOOL;
	EnablePos:BOOL;
	EnableNeg	:BOOL;
	Axis								: ARRAY [1..3] OF AXIS_REF;
					
	Power								: ARRAY [1..3] OF MC_Power;
	AxisId								: UDINT;
	absHome	: MC_StepAbsoluteSwitch;
	finHome	:	MC_FinishHoming;
	Parameter	: MC_HomingParameter;
	bExecute	:	BOOL;
	HomeDirection	:	MC_Home_Direction;
	SwMode		:	MC_Switch_Mode;
	absSw		:	MC_Ref_Signal_Ref;
	homeVel		:	LREAL;
	homeAccel	:	LREAL;
	homeDecel	:	LREAL;
	homeJerk	:	LREAL;
	homePosition	:	LREAL;
	homeTime	:	TIME:=T#60S;
	homeDistance	:	LREAL:=1000;
	homeTorque	:	LREAL;
	
	bAbsSw								:	BOOL;	//PRETEND SWITCH
	bPosSw								:	BOOL;
	bNegSw								:	BOOL;
	Buffer			:MC_BufferMode;	
	Options2	:	ST_Home_Options2;
	Options		:	ST_Home_Options4;

END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[//CONTROLLER CODE
//FOR i:=1 TO GVL.axisNumMax BY 1 DO
//	drives[i](AxisController:=axes[i]);
//END_FOR

FOR GVL.iAxis:=1 TO GVL.axisNumMax BY 1 DO
	drives[GVL.iAxis](AxisController:=GVL.axes[GVL.iAxis]);
	//drives[GVL.iAxis](AxisController:=axes[GVL.iAxis]);
END_FOR

CASE iState OF
	0:	//CHECK AXIS ID's are correct. Gearing limits currently requires the assigned array index of an axis to match the NC ID.
		//May be possible to negate this by changing axes to GVLs so that they can be seen within the drives function - CASE 0 NO LONGER REQ
		iState:=1;
		FOR i:=1 TO GVL.axisNumMax BY 1 DO
			IF GVL.axes[i].Axis.NcToPlc.AxisId <> i THEN
				iState:=999;
			END_IF
		END_FOR
		
	1:	//Gear out all axes to begin
		FOR i:=1 TO 8 BY 1 DO
			GearOut(i:=i);
		END_FOR
		iState:= 2;
	2:	//Wait for gear out
		IF CheckDone(iLow:=1, iHigh:=8) THEN
			iState:=3;
		END_IF
	3:	//Power up axes (and set limits true as no hardware connected)
		FOR i:=1 TO 8 BY 1 DO
			PowerUp(i:=i);
		END_FOR
		iState:= 10;
		
	10:	//Set position of virtual gap axes based on position. In reality we would do some homing sequence of blades first then set the position
		SlitPositions(North:=1,South:=2,East:=3,West:=4,VG:=5,VC:=6,HG:=7,HC:=8);
		iState:=11;
		
	11:	//Wait for position set
		IF CheckDone(iLow:=5,iHigh:=8) THEN
			iState:=12;
		END_IF		
		
	12:	//GEAR IN SLIT GAP AND CENTRE
		SlitSetup(North:=1,South:=2,East:=3,West:=4,VG:=5,VC:=6,HG:=7,HC:=8);
		iState:=13;
	
	13:	//WAIT FOR DONE
		IF CheckDone(iLow:=1, iHigh:=4) THEN
			iState:=14;
		END_IF	

	14: //ALL SETUP!	
			IF bDisableMC THEN
				iState:=50;
			END_IF
	
	50:
		FOR i:=1 TO 8 BY 1 DO
			GearOut(i:=i);
		END_FOR
		iState:=51;
	51:
		IF CheckDone(iLow:=1, iHigh:=8) THEN
			iState:=100;
		END_IF					
			
	100:	//DO NOTHING


		
		IF NOT bDisableMC THEN
			iState:=1;
		END_IF

		
	
	999: //ERROR
		//INOP STATE	
END_CASE

FOR i:=1 TO GVL.axisNumMax BY 1 DO
	IF bSimulate[i] THEN
		simulateStage(position:=GVL.axes[i].Axis.NcToPlc.ActPos, iAxis:=i, simulated:=simulated[i]);
		GVL.axes[i].MCSignalRef.Level:=simulated[i].absSw;
	END_IF
END_FOR


(* TESTING ADVANCED HOMING
*)
FOR i := 1 TO 3 DO
	Axis[i]();

	Power[i](	
		Enable				:= Enable, 
		Enable_Positive		:= EnablePos,
		Enable_Negative		:= EnableNeg,
		Override			:= 100.0, 
		Axis				:= Axis[i]);
END_FOR

AxisId := 1;

(* Test Tasterfeld Öffner *)
Enable				:= TRUE;
EnablePos			:= TRUE;
EnableNeg			:= TRUE;

//SoftEndPos			:= ;
//SoftEndNeg			:= ;
absSw.Level:=bAbsSw;
Options.DisableDriveAccess:=TRUE;
Options2.DisableDriveAccess:=TRUE;
(* Test Tasterfeld Schliesser *)
//CalibrationCam		:= ;

//SOME SIMULATED AXIS CODE
//LIMIT SWITCHES AT -100 and +100, ABS SW in range -10 to +10
IF axis[1].NCtoPLC.ActPos < 10 THEN
	bPosSw:=FALSE;
ELSE 
	bPosSw:= TRUE;
END_IF
IF axis[1].NCtoPLC.ActPos >-10 THEN
	bNegSw:=FALSE;
ELSE 
	bNegSw:= TRUE;
END_IF
IF (axis[1].NCtoPLC.ActPos <2)AND (axis[1].NCtoPLC.ActPos >-2) THEN
	bAbsSw:=TRUE;
ELSE 
	bAbsSw:= FALSe;
END_IF

IF StartHoming THEN
	absHome(
			Axis:=Axis[1],
			Parameter:=Parameter,
			Execute:=TRUE,
			Direction:=HomeDirection, 
			SwitchMode:=SwMode,
			ReferenceSignal:=absSw,
			Velocity:=homeVel,
			Acceleration:= homeAccel,
			Deceleration:=homeDecel,
			Jerk:=homeJerk, 
			TorqueLimit:=homeTorque,
			SetPosition:=homePosition, 
			TimeLimit:= homeTime,
			DistanceLimit:= homeDistance,
			PositiveLimitSwitch:=bPosSw,
			NegativeLimitSwitch:=bNegSw,
			BufferMode:=Buffer,
			Options:=Options);
	//WATCHING
	absHome.Busy;
	absHome.Done;
	absHome.Error;
	absHome.ErrorID;
	IF absHome.Done THEN
		StartHoming:=FALSE;
	END_IF
ELSE
	absHome(
		Axis:=Axis[1],
		Parameter:=Parameter,
		Execute:=FALSE);
END_IF

IF FinishHoming  THEN
	finHome(Axis:=Axis[1],
				Parameter:=Parameter,
				Execute:=bExecute,
				Distance:=5,
				Velocity:=2,
				Options:=Options2
);
	finHome.Busy;
	finHome.Error;
	finHome.Done;
	
END_IF
//*)

]]></ST>
    </Implementation>
    <Method Name="CheckDone" Id="{f8255e59-df7b-4af9-ada6-58c21bf850b3}">
      <Declaration><![CDATA[METHOD CheckDone : BOOL
VAR_INPUT
	iLow	:	UINT;
	iHigh	:	UINT;
END_VAR

VAR
	i		:	UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CheckDone:=TRUE;
FOR i:=iLow TO iHigh BY 1 DO
	CheckDone:= CheckDone AND GVL.axes[i].bDone;
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="GearOut" Id="{c096e6fc-812d-4259-8c64-f354d37770ae}">
      <Declaration><![CDATA[METHOD GearOut : BOOL
VAR_INPUT
	i	:	UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.axes[i].eCommand:=McCommand.GearOut;
GVL.axes[i].bExecute:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerUp" Id="{efa4560c-311a-41aa-bbe0-0aa4eef16646}">
      <Declaration><![CDATA[METHOD PowerUp : BOOL
VAR_INPUT
	i	:	UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.axes[i].bEnable:=TRUE;
GVL.axes[i].fOverride:=100;
Limits.FwLimit[i]:=TRUE;	//in reality you would not set these high, this is just for testing
Limits.BwLimit[i]:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="simulateStage" Id="{deb827a7-c982-4c31-9561-f2bd7c832d23}">
      <Declaration><![CDATA[METHOD simulateStage : BOOL
VAR_INPUT
	position	:	LREAL;
	iAxis		:	UINT;
END_VAR
VAR_IN_OUT
	simulated	:	ST_SimulateStage;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF position <simulated.fHighLim THEN
	Limits.FwLimit[iAxis]:=TRUE;
ELSE
	Limits.FwLimit[iAxis]:=FALSE;	
END_IF

IF position >simulated.fLowLim THEN
	Limits.BwLimit[iAxis]:=TRUE;
ELSE
	Limits.BwLimit[iAxis]:=FALSE;	
END_IF

IF position<simulated.fHighAbs AND position>simulated.fLowAbs THEN
	simulated.absSw:=TRUE;
ELSE
	simulated.absSw:=FALSE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="SlitPositions" Id="{acef6351-9f47-442e-b66f-59c55dd95878}">
      <Declaration><![CDATA[METHOD SlitPositions : BOOL
VAR_INPUT
	North	:	UINT;
	South	:	UINT;
	East	:	UINT;
	West	:	UINT;
	VG		:	UINT;
	VC		:	UINT;
	HG		:	UINT;
	HC		:	UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.axes[VG].eCommand:=McCommand.SetPosition;
GVL.axes[VG].fPosition:=GVL.axes[North].Axis.NcToPlc.ActPos-GVL.axes[South].Axis.NcToPlc.ActPos;
GVL.axes[VG].bExecute:=TRUE;

GVL.axes[VC].eCommand:=McCommand.SetPosition;
GVL.axes[VC].fPosition:=(GVL.axes[North].Axis.NcToPlc.ActPos+GVL.axes[South].Axis.NcToPlc.ActPos)/2;
GVL.axes[VC].bExecute:=TRUE;

GVL.axes[HG].eCommand:=McCommand.SetPosition;
GVL.axes[HG].fPosition:=GVL.axes[East].Axis.NcToPlc.ActPos-GVL.axes[West].Axis.NcToPlc.ActPos;
GVL.axes[HG].bExecute:=TRUE;

GVL.axes[HC].eCommand:=McCommand.SetPosition;
GVL.axes[HC].fPosition:=(GVL.axes[East].Axis.NcToPlc.ActPos+GVL.axes[West].Axis.NcToPlc.ActPos)/2;
GVL.axes[HC].bExecute:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SlitSetup" Id="{9c346981-cc2d-43a8-b095-88fcece736bc}">
      <Declaration><![CDATA[METHOD SlitSetup : BOOL
VAR_INPUT
	North	:	UINT;
	South	:	UINT;
	East	:	UINT;
	West	:	UINT;
	VG		:	UINT;
	VC		:	UINT;
	HG		:	UINT;
	HC		:	UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.axes[North].eCommand:= McCommand.GearInMultiMaster;
GVL.axes[North].masterAxis1:=VG;
GVL.axes[North].masterAxis2:=VC;
GVL.axes[North].fGearRatio1:= 0.5;
GVL.axes[North].fGearRatio2:=1;
GVL.axes[North].bExecute:=TRUE;

GVL.axes[South].eCommand:= McCommand.GearInMultiMaster;
GVL.axes[South].masterAxis1:=VG;
GVL.axes[South].masterAxis2:=VC;
GVL.axes[South].fGearRatio1:= -0.5;
GVL.axes[South].fGearRatio2:=1;
GVL.axes[South].bExecute:=TRUE;

GVL.axes[West].eCommand:= McCommand.GearInMultiMaster;
GVL.axes[West].masterAxis1:=HG;
GVL.axes[West].masterAxis2:=HC;
GVL.axes[West].fGearRatio1:= -0.5;
GVL.axes[West].fGearRatio2:=1;
GVL.axes[West].bExecute:=TRUE;

GVL.axes[East].eCommand:= McCommand.GearInMultiMaster;
GVL.axes[East].masterAxis1:=HG;
GVL.axes[East].masterAxis2:=HC;
GVL.axes[East].fGearRatio1:= 0.5;
GVL.axes[East].fGearRatio2:=1;
GVL.axes[East].bExecute:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="590" Count="0" />
      <LineId Id="249" Count="1" />
      <LineId Id="751" Count="2" />
      <LineId Id="1067" Count="0" />
      <LineId Id="754" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="601" Count="0" />
      <LineId Id="738" Count="0" />
      <LineId Id="749" Count="0" />
      <LineId Id="739" Count="0" />
      <LineId Id="750" Count="0" />
      <LineId Id="741" Count="0" />
      <LineId Id="743" Count="1" />
      <LineId Id="742" Count="0" />
      <LineId Id="740" Count="0" />
      <LineId Id="614" Count="0" />
      <LineId Id="700" Count="0" />
      <LineId Id="702" Count="1" />
      <LineId Id="615" Count="0" />
      <LineId Id="676" Count="1" />
      <LineId Id="706" Count="1" />
      <LineId Id="609" Count="0" />
      <LineId Id="667" Count="1" />
      <LineId Id="672" Count="0" />
      <LineId Id="607" Count="0" />
      <LineId Id="723" Count="0" />
      <LineId Id="708" Count="0" />
      <LineId Id="710" Count="0" />
      <LineId Id="716" Count="2" />
      <LineId Id="725" Count="0" />
      <LineId Id="720" Count="1" />
      <LineId Id="709" Count="0" />
      <LineId Id="616" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="633" Count="6" />
      <LineId Id="664" Count="0" />
      <LineId Id="694" Count="2" />
      <LineId Id="665" Count="0" />
      <LineId Id="697" Count="0" />
      <LineId Id="726" Count="7" />
      <LineId Id="698" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="686" Count="1" />
      <LineId Id="734" Count="3" />
      <LineId Id="1061" Count="0" />
      <LineId Id="1059" Count="0" />
      <LineId Id="745" Count="0" />
      <LineId Id="747" Count="1" />
      <LineId Id="608" Count="0" />
      <LineId Id="849" Count="0" />
      <LineId Id="1140" Count="5" />
      <LineId Id="850" Count="24" />
      <LineId Id="938" Count="0" />
      <LineId Id="974" Count="0" />
      <LineId Id="875" Count="2" />
      <LineId Id="941" Count="0" />
      <LineId Id="944" Count="2" />
      <LineId Id="948" Count="1" />
      <LineId Id="947" Count="0" />
      <LineId Id="950" Count="9" />
      <LineId Id="942" Count="1" />
      <LineId Id="892" Count="0" />
      <LineId Id="913" Count="6" />
      <LineId Id="901" Count="0" />
      <LineId Id="920" Count="1" />
      <LineId Id="940" Count="0" />
      <LineId Id="922" Count="3" />
      <LineId Id="911" Count="0" />
      <LineId Id="926" Count="0" />
      <LineId Id="930" Count="0" />
      <LineId Id="935" Count="0" />
      <LineId Id="927" Count="2" />
      <LineId Id="931" Count="0" />
      <LineId Id="985" Count="2" />
      <LineId Id="980" Count="4" />
      <LineId Id="893" Count="0" />
      <LineId Id="961" Count="2" />
      <LineId Id="967" Count="0" />
      <LineId Id="969" Count="3" />
      <LineId Id="968" Count="0" />
      <LineId Id="975" Count="2" />
      <LineId Id="966" Count="0" />
      <LineId Id="964" Count="0" />
      <LineId Id="936" Count="1" />
      <LineId Id="602" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.CheckDone">
      <LineId Id="8" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.GearOut">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.PowerUp">
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.simulateStage">
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="38" Count="5" />
      <LineId Id="30" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.SlitPositions">
      <LineId Id="54" Count="13" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.SlitSetup">
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="23" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>