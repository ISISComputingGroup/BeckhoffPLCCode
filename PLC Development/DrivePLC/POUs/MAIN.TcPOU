<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="MAIN" Id="{0ea98677-ea3a-4346-a22a-d9ad819fe0c1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	//Simulate virtual axes
	simulated		:	ARRAY [1..GVL.axisNumMax] OF ST_SimulateStage;
	bSimulate		:	ARRAY [1..GVL.axisNumMax] OF BOOL;	//Do we want to simulate?
	
	//{attribute 'OPC.UA.DA' := '0'}
	drives			:	ARRAY [1..GVL.axisNumMax] OF FB_AxisDrive;	
	
	bDisableMC		:	BOOL; 		//boolean control if true the motion control application specific code is disabled - dumb box
	iState			:	UINT;		//state machine index

	(*
		Outputs that are set in the hmi and wired to power axis limit switches. Currently not configred as part of the programme
		Will be added to ST_AxisControl in future
	*)
	limitEnable1	AT %Q*	: BOOL;
	limitEnable2	AT %Q*	: BOOL;	
	
	i: UINT;		//General indexing value for FOR loops	
	
	//HMI VARIABLES	
	hmiAxisSelect	:	UINT:=1;

END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[AXES();
PROG();
SIMULATE();







]]></ST>
    </Implementation>
    <Folder Name="Prog Methods" Id="{212990ae-6442-4648-907a-9b74a7c9f90f}" />
    <Folder Name="Simulate Methods" Id="{9564da1a-4827-4610-81ab-1f383f22c9b4}" />
    <Action Name="AXES" Id="{64e9147a-f428-4655-bd0f-63c28bb82a85}">
      <Implementation>
        <ST><![CDATA[FOR GVL.iAxis:=1 TO GVL.axisNumMax BY 1 DO
	drives[GVL.iAxis](AxisController:=GVL.axes[GVL.iAxis]);
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Method Name="CheckDone" Id="{f8255e59-df7b-4af9-ada6-58c21bf850b3}" FolderPath="Prog Methods\">
      <Declaration><![CDATA[(*
	Scans through axes (from low to high) checking "done" status
*)
METHOD CheckDone : BOOL
VAR_INPUT
	iLow	:	UINT;		//lowest index to check
	iHigh	:	UINT;		//highest index to check
END_VAR

VAR
	i		:	UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CheckDone:=TRUE;
FOR i:=iLow TO iHigh BY 1 DO
	CheckDone:= CheckDone AND GVL.axes[i].bDone;
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="GearOut" Id="{c096e6fc-812d-4259-8c64-f354d37770ae}" FolderPath="Prog Methods\">
      <Declaration><![CDATA[(*
	Gear out an axis
*)
METHOD GearOut : BOOL
VAR_INPUT
	i	:	UINT;	//Axis index to gear out
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.axes[i].eCommand:=eMcCommand.GearOut;
GVL.axes[i].bExecute:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerUp" Id="{efa4560c-311a-41aa-bbe0-0aa4eef16646}" FolderPath="Prog Methods\">
      <Declaration><![CDATA[(*
	Power up a single axis of index i
*)
METHOD PowerUp : BOOL
VAR_INPUT
	i	:	UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.axes[i].bEnable:=TRUE;
GVL.axes[i].fOverride:=100;
Limits.FwLimit[i]:=TRUE;	//Set high as I have no hardware linked
Limits.BwLimit[i]:=TRUE;	//Set high as I have no hardware linked]]></ST>
      </Implementation>
    </Method>
    <Action Name="PROG" Id="{a83d747a-28b8-44b3-812d-dbc6c7a4a77b}">
      <Implementation>
        <ST><![CDATA[CASE iState OF
	0:	//CHECK AXIS ID's are correct. Gearing limits currently requires the assigned array index of an axis to match the NC ID.
		//May be possible to negate this by changing axes to GVLs so that they can be seen within the drives function - CASE 0 NO LONGER REQ
		iState:=1;
		FOR i:=1 TO GVL.axisNumMax BY 1 DO
			IF GVL.axes[i].Axis.NcToPlc.AxisId <> i THEN
				iState:=999;
			END_IF
		END_FOR
		
	1:	//Gear out all axes to begin
		FOR i:=1 TO 8 BY 1 DO
			GearOut(i:=i);
		END_FOR
		iState:= 2;
	2:	//Wait for gear out
		IF CheckDone(iLow:=1, iHigh:=8) THEN
			iState:=3;
		END_IF
	3:	//Power up axes (and set limits true as no hardware connected)
		FOR i:=1 TO 8 BY 1 DO
			PowerUp(i:=i);
		END_FOR
		iState:= 10;
		
	10:	//Set position of virtual gap axes based on position. In reality we would do some homing sequence of blades first then set the position
		SlitPositions(North:=1,South:=2,East:=3,West:=4,VG:=5,VC:=6,HG:=7,HC:=8);
		iState:=11;
		
	11:	//Wait for position set
		IF CheckDone(iLow:=5,iHigh:=8) THEN
			iState:=12;
		END_IF		
		
	12:	//GEAR IN SLIT GAP AND CENTRE
		SlitSetup(North:=1,South:=2,East:=3,West:=4,VG:=5,VC:=6,HG:=7,HC:=8);
		iState:=13;
	
	13:	//WAIT FOR DONE
		IF CheckDone(iLow:=1, iHigh:=4) THEN
			iState:=14;
		END_IF	

	14: //ALL SETUP!	
			IF bDisableMC THEN
				iState:=50;
			END_IF
	
	50:
		FOR i:=1 TO 8 BY 1 DO
			GearOut(i:=i);
		END_FOR
		iState:=51;
	51:
		IF CheckDone(iLow:=1, iHigh:=8) THEN
			iState:=100;
		END_IF					
			
	100:	//DO NOTHING


		
		IF NOT bDisableMC THEN
			iState:=1;
		END_IF

		
	
	999: //ERROR
		//INOP STATE	
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="SIMULATE" Id="{3ab21edf-3a61-475f-a4eb-e4bcda8bf9cd}">
      <Implementation>
        <ST><![CDATA[(*
Simulate axes if bool set TRUE
*)
FOR i:=1 TO GVL.axisNumMax BY 1 DO
	IF bSimulate[i] THEN
		simulateStage(position:=GVL.axes[i].Axis.NcToPlc.ActPos, iAxis:=i, simulated:=simulated[i]);
		GVL.axes[i].MCSignalRef.Level:=simulated[i].absSw;
	END_IF
END_FOR
]]></ST>
      </Implementation>
    </Action>
    <Method Name="simulateStage" Id="{deb827a7-c982-4c31-9561-f2bd7c832d23}" FolderPath="Simulate Methods\">
      <Declaration><![CDATA[(*
	Basic virtual axis simulation.
	Will trigger limit switches beyond set points
	Will trigger absolute switch between given set points
*)
METHOD simulateStage : BOOL
VAR_INPUT
	position	:	LREAL;		//Axis current position
	iAxis		:	UINT;		//Axis index
END_VAR
VAR_IN_OUT
	simulated	:	ST_SimulateStage;	//Struct to hold simulation parameters
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF position <simulated.fHighLim THEN
	Limits.FwLimit[iAxis]:=TRUE;
ELSE
	Limits.FwLimit[iAxis]:=FALSE;	
END_IF

IF position >simulated.fLowLim THEN
	Limits.BwLimit[iAxis]:=TRUE;
ELSE
	Limits.BwLimit[iAxis]:=FALSE;	
END_IF

IF position<simulated.fHighAbs AND position>simulated.fLowAbs THEN
	simulated.absSw:=TRUE;
ELSE
	simulated.absSw:=FALSE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="SlitPositions" Id="{acef6351-9f47-442e-b66f-59c55dd95878}" FolderPath="Prog Methods\">
      <Declaration><![CDATA[(*
	Calculate gap positions of a slit set given N/S/E/W blades
*)
METHOD SlitPositions : BOOL
VAR_INPUT
	North	:	UINT;	//North blade index
	South	:	UINT;	//South blade index
	East	:	UINT;	//East blade index
	West	:	UINT;	//West blade index
	VG		:	UINT;	//Vertical gap size index
	VC		:	UINT;	//Vertical gap centre index
	HG		:	UINT;	//Horizontal gap size index
	HC		:	UINT;	//Horizontal gap centre index
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.axes[VG].eCommand:=eMcCommand.SetPosition;
GVL.axes[VG].fPosition:=GVL.axes[North].Axis.NcToPlc.ActPos-GVL.axes[South].Axis.NcToPlc.ActPos;
GVL.axes[VG].bExecute:=TRUE;

GVL.axes[VC].eCommand:=eMcCommand.SetPosition;
GVL.axes[VC].fPosition:=(GVL.axes[North].Axis.NcToPlc.ActPos+GVL.axes[South].Axis.NcToPlc.ActPos)/2;
GVL.axes[VC].bExecute:=TRUE;

GVL.axes[HG].eCommand:=eMcCommand.SetPosition;
GVL.axes[HG].fPosition:=GVL.axes[East].Axis.NcToPlc.ActPos-GVL.axes[West].Axis.NcToPlc.ActPos;
GVL.axes[HG].bExecute:=TRUE;

GVL.axes[HC].eCommand:=eMcCommand.SetPosition;
GVL.axes[HC].fPosition:=(GVL.axes[East].Axis.NcToPlc.ActPos+GVL.axes[West].Axis.NcToPlc.ActPos)/2;
GVL.axes[HC].bExecute:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SlitSetup" Id="{9c346981-cc2d-43a8-b095-88fcece736bc}" FolderPath="Prog Methods\">
      <Declaration><![CDATA[(*
	Gear in blades to gaps for a slit set
*)
METHOD SlitSetup : BOOL
VAR_INPUT
	North	:	UINT;
	South	:	UINT;
	East	:	UINT;
	West	:	UINT;
	VG		:	UINT;
	VC		:	UINT;
	HG		:	UINT;
	HC		:	UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.axes[North].eCommand:= eMcCommand.GearInMultiMaster;
GVL.axes[North].bExecute:=TRUE;
GVL.axes[NORTH].masterAxes[1].i:=VG;
GVL.axes[NORTH].masterAxes[2].i:=VC;
GVL.axes[NORTH].masterAxes[1].ratio:=0.5;
GVL.axes[NORTH].masterAxes[2].ratio:=1;

GVL.axes[South].eCommand:= eMcCommand.GearInMultiMaster;
GVL.axes[South].bExecute:=TRUE;
GVL.axes[South].masterAxes[1].i:=VG;
GVL.axes[South].masterAxes[2].i:=VC;
GVL.axes[South].masterAxes[1].ratio:=-0.5;
GVL.axes[South].masterAxes[2].ratio:=1;

GVL.axes[West].eCommand:= eMcCommand.GearInMultiMaster;
GVL.axes[West].bExecute:=TRUE;
GVL.axes[West].masterAxes[1].i:=HG;
GVL.axes[West].masterAxes[2].i:=HC;
GVL.axes[West].masterAxes[1].ratio:=-0.5;
GVL.axes[West].masterAxes[2].ratio:=1;


GVL.axes[East].eCommand:= eMcCommand.GearInMultiMaster;
GVL.axes[East].bExecute:=TRUE;
GVL.axes[East].masterAxes[1].i:=HG;
GVL.axes[East].masterAxes[2].i:=HC;
GVL.axes[East].masterAxes[1].ratio:=0.5;
GVL.axes[East].masterAxes[2].ratio:=1;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="256" Count="0" />
      <LineId Id="1178" Count="1" />
      <LineId Id="601" Count="0" />
      <LineId Id="849" Count="0" />
      <LineId Id="1146" Count="1" />
      <LineId Id="851" Count="1" />
      <LineId Id="602" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.AXES">
      <LineId Id="3" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.CheckDone">
      <LineId Id="8" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.GearOut">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.PowerUp">
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.PROG">
      <LineId Id="2" Count="69" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.SIMULATE">
      <LineId Id="9" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="3" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.simulateStage">
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="38" Count="5" />
      <LineId Id="30" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.SlitPositions">
      <LineId Id="54" Count="13" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.SlitSetup">
      <LineId Id="22" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="64" Count="2" />
      <LineId Id="63" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="69" Count="2" />
      <LineId Id="68" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="73" Count="2" />
      <LineId Id="72" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>