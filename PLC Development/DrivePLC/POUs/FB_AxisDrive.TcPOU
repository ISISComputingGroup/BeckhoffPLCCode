<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_AxisDrive" Id="{aef7aef0-3971-449b-83a3-6f8c4c2f7d04}" SpecialFunc="None">
    <Declaration><![CDATA[(*
	Function for motion control of single axis.
	Provides an interface to PLC Open motion control blocks.
	Controls linking of limit switches from slave to master axes.
*)
FUNCTION_BLOCK FB_AxisDrive
VAR_INPUT
END_VAR
VAR_IN_OUT
	AxisController		:	ST_AxisControl;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	eCommandLatched		:	eMcCommand;		//Internally latched command signal, new commands cannot be issued until existing commands have completed.
	doneLatch	:	SR;						//Used to set done signal in AxisController DUT
	bDone		:	BOOL;					//Interal done flag which will be used for latching on an external done located in AxisController DUT
	iParam		:	INT:=1;					//index of NC parameters FBs, no 0 index on array so initialised to 1
	iIndex		:	UINT;					//index value used for limit coupling
	iMasterIndex		:	UINT;			//index value used for limit coupling
	
	//Boolean to store EnableFw and EnableBw of MCPower FB
	FwLimitsEnabled	:	BOOL;	
	BWLimitsEnabled	:	BOOL;
	
	mcDirection	:	MC_Direction;			//Direction control required in function blocks

(*
Motion Function blocks taken from the PLC OPEN standard as defined by PLC Open Standard
Function blocks commented out are yet to be added but the intention is to add these.
Those listed as //NOT IMPLEMENTED have come from the standard but Beckhoff do not support, 
these have been added just as a placeholder for future support.
*)
	//Not Implemented
	//MCReadDigitalInput		:	MC_ReadDigitalInput;			//NOT IMPLEMENTED		
	//MCReadDigitalOutput		:	MC_ReadDigitalOutput;			//NOT IMPLEMENTED	
	//MCWriteDigitalOutput		:	MC_WriteDigitalOutput;			//NOT IMPLEMENTED
	//MCReadActualTorque		:	MC_ReadActualTorque;			//NOT IMPLEMENTED	
	//MCReadAxisInfo			:	MC_ReadAxisInfo;				//NOT IMPLEMENTED	
	//MCReadMotionState			:	MC_ReadMotionState;				//NOT IMPLEMENTED
	//MCDigitalCamSwitch		:	MC_DigitalCamSwitch;			//NOT IMPLEMENTED
	//MCTorqueControl			:	MC_TorqueControl;				//NOT IMPLEMENTED		
	//MCPositionProfile			:	MC_PositionProfile;				//NOT IMPLEMENTED		
	//MCVelocityProfile			:	MC_VelocityProfile;				//NOT IMPLEMENTED		
	//MCAccelerationProfile		:	MC_AccelerationProfile;			//NOT IMPLEMENTED
	
	
	(* Administrative Function Blocks *)                                                                     
	MCReset						:	MC_Reset;											
	MCPower						:	MC_Power;										
	//MCReadStatus				:	MC_ReadStatus;					//Same as Axis.ReadStatus();						
	//MCReadAxisError			:	MC_ReadAxisError;									
	MCReadParameter				:	MC_ReadParameter;														
	MCWriteParameter			:	MC_WriteParameter;										
	MCWriteBoolParameter		:	MC_WriteBoolParameter;								
		
	//MCReadActualPosition		:	MC_ReadActualPosition;								
	//MCReadActualVelocity		:	MC_ReadActualVelocity;								
		
	MCSetPosition				:	MC_SetPosition;										
	//MCSetOverride				:	MC_SetOverride;										
	//MCTouchProbe				:	MC_TouchProbe;										
		
	//MCAbortTrigger			:	MC_AbortTrigger;									
	//MCAbortSuperposition		:	MC_AbortSuperposition;			//Listed as HaltSuperimposed in PLC Open standard	
	//MCCamTableSelect			:	MC_CamTableSelect;									
	
	(* Motion Function Blocks *)
	//MCHome					:	MC_Home;											
	MCJog						:	MC_Jog;												
	MCStop						:	MC_Stop;											
	//MCHalt					:	MC_Halt;											
	MCMoveAbsolute				:	MC_MoveAbsolute;									
	MCMoveRelative				:	MC_MoveRelative;									
	//MCMoveAdditive			:	MC_MoveAdditive;									
	//MCMoveSuperimposed		:	MC_MoveSuperimposed;								
	MCMoveVelocity				:	MC_MoveVelocity;									
	//MCMoveContinuousAbsolute	:	MC_MoveContinuousAbsolute;						
	//MCMoveContinuousRelative	:	MC_MoveContinuousRelative;						
	//MCMoveModulo				:	MC_MoveModulo;										
	
	(* Synchronised Motion Function Blocks *)		
	MCGearIn					:	MC_GearIn;											
	//MCGearInDyn				:	MC_GearInDyn;										
	MCGearInMultiMaster			:	MC_GearInMultiMaster;								
	MCGearOut					:	MC_GearOut;												                                                                                    
	//MCHaltPhasing				:	MC_HaltPhasing;										
	//MCPhasingAbsolute			:	MC_PhasingAbsolute;									
	//MCPhasingRelative			:	MC_PhasingRelative;										                                                                                                                                                 
	//MCCamIn					:	MC_CamIn;											
	//MCCamOut					:	MC_CamOut;											
	//MCCamScaling				:	MC_CamScaling;										                                                      
	//MCCamAdd					:	MC_CamAdd;											
	//MCCamExchange				:	MC_CamExchange;										
	//MCCamInV2					:	MC_CamIn_V2;		//REQUIRED FOR MULTICAMMING 	
	//MCCamRemove				:	MC_CamRemove;										
	//MCCamScalingV2			:	MC_CamScaling_V2;									

	(* Advanced Homing Steps and Finishing Moves *)
	MCFinishHoming			:	MC_FinishHoming;
	//MCHomeDirect			:	MC_HomeDirect;
	//MCAbortHoming			:	MC_AbortHoming;
	MCStepAbsoluteSwitch	:	MC_StepAbsoluteSwitch;
	//MCStepBlock			:	MC_StepBlock;
	//MCStepBlockLagBased	:	MC_StepBlockLagBased;
	MCStepLimitSwitch		:	MC_StepLimitSwitch;
	MCStepReferencePulse	:	MC_StepReferencePulse;
	
	
	(* Additional variable structures required for Advanced Homing *)
	//MCSignalRef			:	MC_Ref_Signal_Ref;
	StOptions				:	ST_Home_Options;
	StOptions2				:	ST_Home_Options2;
	StOptions3				:	ST_Home_Options3;
	StOptions4				:	ST_Home_Options4;
	MCHomingParameter		:	MC_HomingParameter;		//Must be passed between homing steps.		
							
		
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[AxisController.Axis.ReadStatus();

//////////////////////////////////////////////////////////////////////
//     _   __  _____ ____    ____ _____  _  _____ _____ ____  		//
//    / \  \ \/ |_ _/ ___|  / ___|_   _|/ \|_   _| ____/ ___| 		//
//   / _ \  \  / | |\___ \  \___ \ | | / _ \ | | |  _| \___ \ 		//
//  / ___ \ /  \ | | ___) |  ___) || |/ ___ \| | | |___ ___) |		//
// /_/   \_/_/\_|___|____/  |____/ |_/_/   \_|_| |_____|____/ 		//
// 																	//
//////////////////////////////////////////////////////////////////////
                                                            
//Numerical representation for axis states - may use later for buffering functions.
IF AxisController.AXIS.Status.Disabled THEN
	AxisController.iAxisState:=		100;
ELSIF AxisController.AXIS.Status.StandStill THEN
	AxisController.iAxisState:=		200;
ELSIF AxisController.AXIS.Status.Homing	THEN
	AxisController.iAxisState:= 	300;
ELSIF AxisController.AXIS.Status.DiscreteMotion	THEN
	AxisController.iAxisState:=		400;
ELSIF AxisController.AXIS.Status.SynchronizedMotion	THEN
	AxisController.iAxisState:=		500;
ELSIF AxisController.AXIS.Status.ContinuousMotion	THEN
	AxisController.iAxisState:=		600;
ELSIF AxisController.AXIS.Status.Stopping	THEN
	AxisController.iAxisState:= 	700;	
ELSIF AxisController.AXIS.Status.Error THEN
	AxisController.iAxisState:=		999;	
ELSE
	AxisController.iAxisState:=		0;
END_IF

//////////////////////////////////////////////////////////////////////////////////////////
//  _     ___ __  __ ___ _____   ______        _____ _____ ____ _   _ _____ ____  		//
// | |   |_ _|  \/  |_ _|_   _| / ___\ \      / |_ _|_   _/ ___| | | | ____/ ___| 		//
// | |    | || |\/| || |  | |   \___ \\ \ /\ / / | |  | || |   | |_| |  _| \___ \ 		//
// | |___ | || |  | || |  | |    ___) |\ V  V /  | |  | || |___|  _  | |___ ___) |		//
// |_____|___|_|  |_|___| |_|   |____/  \_/\_/  |___| |_| \____|_| |_|_____|____/		//
//																						//
//////////////////////////////////////////////////////////////////////////////////////////

//Initialise Foward and Backward limits to the hardware limit switches for this axis
FwLimitsEnabled :=Limits.FwLimit[GVL.iAxis];
BwLimitsEnabled :=Limits.BwLimit[GVL.iAxis];

(*
Cycle through Limits.coupledFwLimit and Limits.coupledBwLimit.
Looking to see if any axes have the current axis (GVL.iAxis) listed as a master.
If this axis is listed as a master, check the hardware limits of that slave.
Gear ratio determines whether we are looking for a Forward or a Backward limit on the slave axis. 
If the limit switch is disabled, disable motion for this axis.
*)
FOR iIndex:=1 TO GVL.axisNumMax DO
	FOR iMasterIndex:=1 TO 5 DO
		//If listed as a master
		IF Limits.coupledFwLimit[iIndex][iMasterIndex].iMasterAxis = GVL.iAxis THEN
			//If forward limit linked to forward of slave, check forward limit of slave
			IF Limits.coupledFwLimit[iIndex][iMasterIndex].eLimitType=eLimitCoupling.FwSw AND NOT Limits.FwLimit[iIndex] THEN
				FwLimitsEnabled:=FALSE;
			END_IF
			//If forward limit linked to backwardof slave, check forward limit of slave
			IF Limits.coupledFwLimit[iIndex][iMasterIndex].eLimitType=eLimitCoupling.BwSw AND NOT Limits.BwLimit[iIndex] THEN
				FwLimitsEnabled:=FALSE;
			END_IF
			//If backward limit linked to forward of slave, check forward limit of slave
			IF Limits.coupledBwLimit[iIndex][iMasterIndex].eLimitType=eLimitCoupling.FwSw AND NOT Limits.FwLimit[iIndex] THEN
				BwLimitsEnabled:=FALSE;
			END_IF
			//If backward limit linked to backward of slave, check backward limit of slave
			IF Limits.coupledBwLimit[iIndex][iMasterIndex].eLimitType=eLimitCoupling.BwSw AND NOT Limits.BwLimit[iIndex] THEN
				BwLimitsEnabled:=FALSE;
			END_IF
		END_IF
	END_FOR
END_FOR

AxisController.bFwEnabled:=FwLimitsEnabled;		//Feedback to ST_AxisControl that forward positioning is available
AxisController.bBwEnabled:=BwLimitsEnabled;		//Feedback to ST_AxisControl that backward positioning is available

//////////////////////////////////////////////////////////
//  ____   _____        _______ ____    _   _ ____  	//
// |  _ \ / _ \ \      / | ____|  _ \  | | | |  _ \ 	//
// | |_) | | | \ \ /\ / /|  _| | |_) | | | | | |_) |	//
// |  __/| |_| |\ V  V / | |___|  _ <  | |_| |  __/ 	//
// |_|    \___/  \_/\_/  |_____|_| \_\  \___/|_|   		//
//														//
/////////////////////////////////////////////////////////// 
(*
Power up the axis.
Externally fed variables are bEnabled and fOverride, limits all controlled internally.
*)                                           
MCPower(
	Axis:=AxisController.Axis,
	Enable:=AxisController.bEnable,
	Enable_Positive:=FwLimitsEnabled,
	Enable_Negative:=BwLimitsEnabled,
	Override:=AxisController.fOverride,
	Status=>,
	Busy=>, 
	Active=>AxisController.bAxisReady,	//Maybe want a bPowered or bEnabled flag instead?
	Error=>,
	ErrorID=>
);

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ____  _____    _    ____    ____   _    ____     _    __  __ _____ _____ _____ ____  ____  			//
// |  _ \| ____|  / \  |  _ \  |  _ \ / \  |  _ \   / \  |  \/  | ____|_   _| ____|  _ \/ ___| 			//
// | |_) |  _|   / _ \ | | | | | |_) / _ \ | |_) | / _ \ | |\/| |  _|   | | |  _| | |_) \___ \ 			//
// |  _ <| |___ / ___ \| |_| | |  __/ ___ \|  _ < / ___ \| |  | | |___  | | | |___|  _ < ___) |			//
// |_| \_|_____/_/   \_|____/  |_| /_/   \_|_| \_/_/   \_|_|  |_|_____| |_| |_____|_| \_|____/ 			//
//                                                                                           			//
//////////////////////////////////////////////////////////////////////////////////////////////////////////
(*
Check NC parameters available from MCReadParameter FB (17 in total)
See eRWParameter DUT for complete list or PLC OPEN documentation
To call all 17 from a single functionblock instance only 1 can be checked per cycle so there will be at minimum a 34 cycle delay checking each parameter
The MCReadParameter does also cover the functionality of MCReadBoolParameter so these booleans are separately converted from the MCReadParameter call
*)
MCReadParameter(Axis:=AxisController.AXIS,ParameterNumber:=iParam);
IF MCReadParameter.Valid THEN
	MCReadParameter.Enable:=FALSE;
	AxisController.fParameters[iParam]:=MCReadParameter.Value;
	iParam:= iParam+1;
	IF iParam>17 THEN
		iParam:=1;
	END_IF
ELSE
	MCReadParameter.Enable:=TRUE;
END_IF

//Convert LREALS to BOOLS


IF AxisController.fParameters[eRWParameter.EnableLimitPos]=1 THEN
	AxisController.bSoftLimPosEn:=TRUE;
ELSE
	AxisController.bSoftLimPosEn:=FALSE;
END_IF
IF AxisController.fParameters[eRWParameter.EnableLimitNeg]=1 THEN
	AxisController.bSoftLimNegEn:=TRUE;
ELSE
	AxisController.bSoftLimNegEn:=FALSE;
END_IF
IF AxisController.fParameters[eRWParameter.EnablePosLagMonitoring]=1 THEN
	AxisController.bPosLagEn:=TRUE;
ELSE
	AxisController.bPosLagEn:=FALSE;
END_IF

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//  __  __  ____   _____ _   _ _   _  ____ _____ ___ ___  _   _    ____    _    _     _     ____  		//
// |  \/  |/ ___| |  ___| | | | \ | |/ ___|_   _|_ _/ _ \| \ | |  / ___|  / \  | |   | |   / ___| 		//
// | |\/| | |     | |_  | | | |  \| | |     | |  | | | | |  \| | | |     / _ \ | |   | |   \___ \ 		//
// | |  | | |___  |  _| | |_| | |\  | |___  | |  | | |_| | |\  | | |___ / ___ \| |___| |___ ___) |		//
// |_|  |_|\____| |_|    \___/|_| \_|\____| |_| |___\___/|_| \_|  \____/_/   \_|_____|_____|____/ 		//
//                                         																//                                                      
//////////////////////////////////////////////////////////////////////////////////////////////////////////
(*
Call MC Function Blocks and clear execute signals
Any MC function blocks added to the state machine must be called here with the given format.
Some FBs have slightly differing structures so these should aim to conform to the existing structure
Function blocks will hold done and error signals for 1 cycle with no execute held
*)
MCReadParameter(Axis:=AxisController.Axis);	//Reading in motion parameters, using one functionblock for all params means need to disable

MCReset(Axis:=AxisController.Axis);
MCReset.Execute:=FALSE;

MCWriteParameter(Axis:=AxisController.Axis);
MCWriteParameter.Execute:=FALSE;

MCWriteBoolParameter(Axis:=AxisController.Axis);
MCWriteBoolParameter.Execute:=FALSE;

MCSetPosition(Axis:=AxisController.Axis);
MCSetPosition.Execute:=FALSE;

MCMoveAbsolute(Axis:=AxisController.Axis);
MCMoveAbsolute.Execute:=FALSE;

MCMoveRelative(Axis:=AxisController.Axis);
MCMoveRelative.Execute:=FALSE;

MCGearIn(Slave:=AxisController.Axis, Master:=GVL.axes[AxisController.masterAxis].Axis);
MCGearIn.Execute:=FALSE;

MCGearInMultiMaster(Master1:=GVL.axes[AxisController.masterAxes[1].i].Axis,Master2:=GVL.axes[AxisController.masterAxes[2].i].Axis,Master3:=GVL.axes[AxisController.masterAxes[3].i].Axis,Master4:=GVL.axes[AxisController.masterAxes[4].i].Axis,Slave:=AxisController.Axis);
MCGearInMultiMaster.Enable:=FALSE;	//NOT EXECUTE AS FB ALLOWS CONTINUAL UPDATING OF RATIOS WHILST ENABLED

MCGearOut(Slave:=AxisController.Axis);
MCGearOut.Execute:=FALSE;

MCJog(Axis:=AxisController.Axis);
MCJog.JogBackwards:=FALSE;
MCJog.JogForward:=FALSE;

MCStepAbsoluteSwitch(Axis:=AxisController.Axis,Parameter:=MCHomingParameter);
MCStepAbsoluteSwitch.Execute:=FALSE;

MCStepLimitSwitch(Axis:=AxisController.Axis,Parameter:=MCHomingParameter);
MCStepLimitSwitch.Execute:=FALSE;

MCStepReferencePulse(Axis:=AxisController.Axis,Parameter:=MCHomingParameter);
MCStepReferencePulse.Execute:=FALSE;

MCFinishHoming(Axis:=AxisController.Axis,Parameter:=MCHomingParameter);
MCFinishHoming.Execute:=FALSE;

MCMoveVelocity(Axis:=AxisController.Axis);
MCMoveVelocity.Execute:=FALSE;

MCStop(Axis:=AxisController.Axis);
MCStop.Execute:=FALSE;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   ____ ___  __  __ __  __    _    _   _ ____     ____    _    ____  _____   ____ _____  _  _____ _____ __  __ _____ _   _ _____ ____ 	// 
//  / ___/ _ \|  \/  |  \/  |  / \  | \ | |  _ \   / ___|  / \  / ___|| ____| / ___|_   _|/ \|_   _| ____|  \/  | ____| \ | |_   _/ ___| 	//
// | |  | | | | |\/| | |\/| | / _ \ |  \| | | | | | |     / _ \ \___ \|  _|   \___ \ | | / _ \ | | |  _| | |\/| |  _| |  \| | | | \___ \ 	//
// | |__| |_| | |  | | |  | |/ ___ \| |\  | |_| | | |___ / ___ \ ___) | |___   ___) || |/ ___ \| | | |___| |  | | |___| |\  | | |  ___) |	//
//  \____\___/|_|  |_|_|  |_/_/   \_|_| \_|____/   \____/_/   \_|____/|_____| |____/ |_/_/   \_|_| |_____|_|  |_|_____|_| \_| |_| |____/	//
//																																			//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

(*
Internal statemachine to handle motion control flow and logic.
Functions are NOT called in this statemachine, these just update values given to the state machine. This was the method recommended by Beckhoff
The following basic wrapper should be used for adding new function blocks. Any that do not conform to this should be modified to conform
Notably some FBs have no .Done but do have .Active
	
	mcFunctionBlock.Execute		:=AxisController.bExecute;
	mcFunctionBlock.misc1..n	:=AxisController.misc1..n;
	
	bDone:=mcFunctionBlock.Done;
	AxisController.bBusy:= mcFunctionBlock.Busy;
	
	If mcFunctionBlock.Error THEN
		AxisController.bError:=TRUE;
		AxisController.iErrorID:= mcFunctionBlock.ErrorID;
	END_IF
	IF NOT mcFunctionBlock.Busy THEN
		eCommandLatched:=eMcCommand.Idle;
	END_IF
	
Function block specific parameters should be added to the ST_AxisControl if not already listed
eCommandLatched is currently being used to hold control flow logic so that users cannot send new commands until previous ones have complete.
This will definitely need to be modified to allow buffering in the future and to allow stop/halt commands 
but I haven't looked in to the best way to do this yet.	

It may be that it doesn't matter if it is latched at all as we can rely on waiting for the done signal before sending subsequent commands if it really matters
*)
//If we're not doing anything or have just done something we no longer latch on the given command
IF NOT AxisController.AXIS.Status.HasJob OR AxisController.bDone THEN
	eCommandLatched:=AxisController.eCommand;
END_IF
CASE eCommandLatched OF
	
	eMcCommand.Idle:
		AxisController.bBusy	:=FALSE;
		AxisController.bExecute	:=FALSE;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	eMcCommand.Reset:
		AxisController.bError	:=FALSE;
		MCReset.Execute:=AxisController.bReset;
		
		bDone:=McReset.Done;
		AxisController.bBusy:=MCReset.Busy;
		IF MCReset.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:=MCReset.ErrorID;	
		END_IF
		IF NOT MCReset.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
			AxisController.bReset:=FALSE;
		END_IF
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	eMcCommand.WriteParameter:		
		MCWriteParameter.Execute:=AxisController.bExecute;
		MCWriteParameter.ParameterNumber:=AxisController.iParameterIndex;
		MCWriteParameter.Value:=AxisController.fParameterValue;
		
		bDone:=MCWriteParameter.Done;
		AxisController.bBusy:= MCWriteParameter.Busy;
		
		IF MCWriteParameter.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:=MCWriteParameter.ErrorID;	
		END_IF	
		IF NOT MCWriteParameter.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF			
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	eMcCommand.WriteBoolParameter:	
		MCWriteBoolParameter.Execute:=AxisController.bExecute;
		MCWriteBoolParameter.ParameterNumber:=AxisController.iParameterIndex;
		MCWriteBoolParameter.Value:=AxisController.bInput;
		
		bDone:=MCWriteBoolParameter.Done;
		AxisController.bBusy:=MCWriteBoolParameter.Busy;
		
		IF MCWriteBoolParameter.Error THEN
			AxisController.bError:= TRUE;
			AxisController.iErrorID:=MCWriteBoolParameter.ErrorID;
		END_IF			
		IF NOT MCWriteBoolParameter.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	eMcCommand.SetPosition:	
		MCSetPosition.Execute:=AxisController.bExecute;
		MCSetPosition.Position:=AxisController.fPosition;
		
		AxisController.bBusy:=MCSetPosition.Busy;
		bDone:=MCSetPosition.Done;
		
		IF MCSetPosition.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:= MCSetPosition.ErrorID;
		END_IF
		IF NOT MCSetPosition.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	eMcCommand.MoveAbsolute:	
		MCMoveAbsolute.Execute:=AxisController.bExecute;
		MCMoveAbsolute.Position:=AxisController.fPosition;
		MCMoveAbsolute.Velocity:=AxisController.fVelocity;
		MCMoveAbsolute.Acceleration:=AxisController.fAcceleration;
		MCMoveAbsolute.Deceleration:=AxisController.fDeceleration;
		MCMoveAbsolute.Jerk:=0;
		MCMoveAbsolute.BufferMode:=MC_BufferMode.MC_Buffered;
		
		bDone:=MCMoveAbsolute.Done;
		AxisController.bBusy:=MCMoveAbsolute.Busy;
		
		IF MCMoveAbsolute.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:=MCMoveAbsolute.ErrorID;
		END_IF
		IF NOT MCMoveAbsolute.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	eMcCommand.MoveRelative:		
		MCMoveRelative.Execute:=AxisController.bExecute;
		MCMoveRelative.Distance:=AxisController.fDistance;
		MCMoveRelative.Velocity:=AxisController.fVelocity;
		MCMoveRelative.Acceleration:=AxisController.fAcceleration;
		MCMoveRelative.Deceleration:=AxisController.fDeceleration;
		MCMoveRelative.Jerk:=0;
		MCMoveRelative.BufferMode:=MC_BufferMode.MC_Buffered;
		
		bDone:=MCMoveRelative.Done;
		AxisController.bBusy:=MCMoveRelative.Busy;
		
		IF MCMoveRelative.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:=MCMoveRelative.ErrorID;
		END_IF
		IF NOT MCMoveRelative.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF		
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	eMcCommand.GearIn:
		//Dependent on +ve or -ve gear ratio determines whether to link Fw to Fw and Bw to Bw or Fw to Bw and Bw to Fw
		IF AxisController.fGearRatioNum>0 THEN
			Limits.coupledFwLimit[GVL.iAxis][1].eLimitType:=eLimitCoupling.FwSw;		
			Limits.coupledBwLimit[GVL.iAxis][1].eLimitType:=eLimitCoupling.BwSw;				
		END_IF
		IF AxisController.fGearRatioNum<0 THEN
			Limits.coupledFwLimit[GVL.iAxis][1].eLimitType:=eLimitCoupling.BwSw;
			Limits.coupledBwLimit[GVL.iAxis][1].eLimitType:=eLimitCoupling.FwSw;		
		END_IF
		Limits.coupledFwLimit[GVL.iAxis][1].iMasterAxis:=AxisController.masterAxis;
		Limits.coupledBwLimit[GVL.iAxis][1].iMasterAxis:=AxisController.masterAxis;
		
		MCGearIn.Execute:=AxisController.bExecute;
		MCGearIn.RatioNumerator:=AxisController.fGearRatioNum;
		MCGearIn.RatioDenominator:=AxisController.iGearRatioDen;
		
		bDone:=McGearIn.InGear;
		AxisController.bBusy:=MCGearIn.Busy;
		
		IF MCGearIn.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:=MCGearIn.ErrorID;
		END_IF		
		IF NOT MCGearIn.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	eMcCommand.GearInMultiMaster:		
		//Set up limits
		FOR iMasterIndex:=1 TO GVL.axisCoupleMax DO
			IF AxisController.masterAxes[iMasterIndex].ratio>0 THEN
				Limits.coupledFwLimit[GVL.iAxis][iMasterIndex+1].eLimitType:=eLimitCoupling.FwSw;				
				Limits.coupledBwLimit[GVL.iAxis][iMasterIndex+1].eLimitType:=eLimitCoupling.BwSw;				
			END_IF
			IF AxisController.masterAxes[iMasterIndex].ratio<0 THEN
				Limits.coupledFwLimit[GVL.iAxis][iMasterIndex+1].eLimitType:=eLimitCoupling.BwSw;
				Limits.coupledBwLimit[GVL.iAxis][iMasterIndex+1].eLimitType:=eLimitCoupling.FwSw;
			END_IF
			Limits.coupledFwLimit[GVL.iAxis][iMasterIndex+1].iMasterAxis:=AxisController.masterAxes[iMasterIndex].i;
			Limits.coupledBwLimit[GVL.iAxis][iMasterIndex+1].iMasterAxis:=AxisController.masterAxes[iMasterIndex].i;
		END_FOR
		

		
		(*	Issue with this MC block (other than everything...) is that it doesn't conform to the standard and use an execute signal. The execute
			signal in any other block determines that when it is high one of either error,done,busy must be on. That is not the case with this block
			what happens is it triggers, doesn't register a busy and so immediately clears as done. If has been modified to conform.
		*)
		MCGearInMultiMaster.Enable:=AxisController.bExecute;
		MCGearInMultiMaster.GearRatio1:=AxisController.masterAxes[1].ratio;
		MCGearInMultiMaster.GearRatio2:=AxisController.masterAxes[2].ratio;
		MCGearInMultiMaster.GearRatio3:=AxisController.masterAxes[3].ratio;
		MCGearInMultiMaster.GearRatio4:=AxisController.masterAxes[4].ratio;
		
		AxisController.bBusy:=MCGearInMultiMaster.Busy;
		IF MCGearInMultiMaster.Enable THEN
			AxisController.bBusy:=TRUE;	//busy does not go immediately high when enable high 
			bDone:=FALSE;
		END_IF

		bDone:=MCGearInMultiMaster.InGear;	
		IF MCGearInMultiMaster.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:=MCGearInMultiMaster.ErrorID;
		END_IF
		IF NOT MCGearInMultiMaster.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	eMcCommand.GearOut:		
		//Gearout - remove all masters from slave
		FOR iMasterIndex:=1 TO 5 DO
				Limits.coupledFwLimit[GVL.iAxis][iMasterIndex].eLimitType:=eLimitCoupling.None;
				Limits.coupledBwLimit[GVL.iAxis][iMasterIndex].eLimitType:=eLimitCoupling.None;
		END_FOR		
	
		MCGearOut.Execute:=AxisController.bExecute;
		
		AxisController.bBusy:=MCGearOut.Busy;
		bDone:=MCGearOut.Done;
		IF MCGearOut.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:=MCGearOut.ErrorID;
		END_IF
		IF NOT MCGearOut.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
	eMcCommand.Jog:
		MCJog.JogForward:=AxisController.bJogForward;
		MCJog.JogBackwards:=AxisController.bJogBackward;
		
		bDone:=MCJog.Done;
		
		IF MCJog.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:=MCJog.ErrorID;
		END_IF
		IF NOT MCJog.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	eMcCommand.HomeStepAbsoluteSwitch:
		//Issue: If execute not held high the function will not reverse on its own to find the abs switch when hitting a limit
		//You have to reissue the command. I want to try and keep bExecute high
		AxisController.MCSignalRef.Level:=AxisController.bAbsSw;
		
		IF (NOT Limits.FwLimit[GVL.iAxis]) OR (NOT Limits.BwLimit[GVL.iAxis]) THEN
			MCStepAbsoluteSwitch.Execute:=TRUE;
		ELSE	
			MCStepAbsoluteSwitch.Execute:=AxisController.bExecute;
		END_IF
	
		MCStepAbsoluteSwitch.Direction:= AxisController.mcHomeDirection;
		MCStepAbsoluteSwitch.SwitchMode:=AxisController.mcSwitchMode;
		MCStepAbsoluteSwitch.ReferenceSignal:=AxisController.mcSignalRef;
		MCStepAbsoluteSwitch.Velocity:=AxisController.fHomeVelocity;
		MCStepAbsoluteSwitch.Acceleration:=0;
		MCStepAbsoluteSwitch.Deceleration:=0;
		MCStepAbsoluteSwitch.Jerk:=0;
		MCStepAbsoluteSwitch.TorqueLimit:=AxisController.fHomeTorque;
		MCStepAbsoluteSwitch.SetPosition:=AxisController.fHomePosition;
		MCStepAbsoluteSwitch.TimeLimit:=AxisController.tHomeTimeLimit;
		MCStepAbsoluteSwitch.DistanceLimit:=AxisController.fHomeDistanceLimit;
		MCStepAbsoluteSwitch.PositiveLimitSwitch:= NOT Limits.FwLimit[GVL.iAxis];	//Step FB has R_TRIG behaviour but limits set as Normally Closed so logic is inverted
		MCStepAbsoluteSwitch.NegativeLimitSwitch:= NOT Limits.BwLimit[GVL.iAxis];	//Step FB has R_TRIG behaviour but limits set as Normally Closed so logic is inverted
		MCStepAbsoluteSwitch.BufferMode:=AxisController.buffer;
		StOptions4.DisableDriveAccess:=TRUE;		//Testing required with hardware. This step may be redundant.
		MCStepAbsoluteSwitch.Options:=StOptions4;
		
		bDone:=MCStepAbsoluteSwitch.Done;
		AxisController.bBusy:=MCStepAbsoluteSwitch.Busy;
		
		IF MCStepAbsoluteSwitch.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:=MCStepAbsoluteSwitch.ErrorID;
		END_IF
		IF NOT MCStepAbsoluteSwitch.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	eMcCommand.HomeStepLimitSwitch:
		//TESTING SPACE FOR SIGNAL REF, OPTIONS, AND SWITCH MODE
		//AxisController.MCHomeDirection:=mcNegativeDirection;
		MCPower.Enable_Negative:=TRUE;
		MCPower.Enable_Positive:=TRUE;
		MCPower(Axis:=AxisController.Axis);
		AxisController.MCHomeDirection:= mcPositiveDirection;
		StOptions4.DisableDriveAccess:=TRUE;
		AxisController.MCSwitchMode;
		AxisController.MCSignalRef.SignalSource;
		AxisController.MCSignalRef.Level:= NOT(FwLimitsEnabled AND BwLimitsEnabled);
		AxisController.MCSignalRef.TouchProbe;
		/////////////////////////////
	
		MCStepLimitSwitch.Execute:= AxisController.bExecute;
		MCStepLimitSwitch.Direction:= AxisController.MCHomeDirection;
		MCStepLimitSwitch.LimitSwitchMode:=AxisController.MCSwitchMode;
		MCStepLimitSwitch.LimitSwitchSignal:=AxisController.MCSignalRef;
		MCStepLimitSwitch.Velocity:=AxisController.fHomeVelocity;
		MCStepLimitSwitch.Acceleration:=0;
		MCStepLimitSwitch.Deceleration:=0;
		MCStepLimitSwitch.Jerk:=0;
		MCStepLimitSwitch.SetPosition:=AxisController.fHomePosition;
		MCStepLimitSwitch.TimeLimit:=AxisController.tHomeTimeLimit;
		MCStepLimitSwitch.DistanceLimit:=AxisController.fHomeDistanceLimit;
		MCStepLimitSwitch.Options:=StOptions4;
		
		bDone:=MCStepLimitSwitch.Done;
		AxisController.bBusy:=MCStepLimitSwitch.Busy;
		
		IF MCStepLimitSwitch.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:= MCStepLimitSwitch.ErrorID;
		END_IF
		IF NOT MCStepLimitSwitch.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF
		
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	eMcCommand.HomeStepReferencePulse:
	
		//DEFINITELY GOING TO WANT MULTIPLE MC_Ref_Signal_Ref structures for each home step type, ie an Abs hardware one, limit one, reference pulse one.
		AxisController.MCHomeDirection:=mcPositiveDirection;
		AxisController.MCSignalRef.Level:=AxisController.bAbsSw; //CHANGE TO ENCODER HARDWARE
		
	
		MCStepReferencePulse.Execute:=AxisController.bExecute;
		MCStepReferencePulse.Direction:=AxisController.MCHomeDirection;
		MCStepReferencePulse.ReferenceSignal:=AxisController.MCSignalRef;
		MCStepReferencePulse.Velocity:=AxisController.fHomeVelocity;
		MCStepReferencePulse.Acceleration:=0;
		MCStepReferencePulse.Deceleration:=0;
		MCStepReferencePulse.Jerk:=0;
		MCStepReferencePulse.SetPosition:=AxisController.fHomePosition; //ADD MULTIPLE HOME POSITIONS OR DO I CARE?
		MCStepReferencePulse.TimeLimit:=AxisController.tHomeTimeLimit;
		MCStepReferencePulse.DistanceLimit:=AxisController.fHomeDistanceLimit;
		MCStepReferencePulse.Options:=StOptions4;
		
		bDone:=MCStepReferencePulse.Done;
		AxisController.bBusy:=MCStepReferencePulse.Busy;
		
		IF MCStepReferencePulse.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:= MCStepReferencePulse.ErrorID;
		END_IF
		IF NOT MCStepReferencePulse.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF
		
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
	eMcCommand.HomeFinish:
		MCFinishHoming.Execute:=AxisController.bExecute;
		MCFinishHoming.Distance:=AxisController.fHomeDistance;
		MCFinishHoming.Velocity:=AxisController.fHomeVelocity;
		
		StOptions2.DisableDriveAccess:=TRUE;	//Testing required with hardware. This step may be redundant.
		MCFinishHoming.Options:=StOptions2;
		
		bDone:=MCFinishHoming.Done;
		AxisController.bBusy:=MCFinishHoming.Busy;
		
		IF MCFinishHoming.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:=MCFinishHoming.ErrorID;
		END_IF
		IF NOT MCFinishHoming.Busy THEN
			eCommandLAtched:=eMcCommand.Idle;
		END_IF
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	eMcCommand.MoveVelocity:
		MCMoveVelocity.Execute:=AxisController.bExecute;
		MCMoveVelocity.Acceleration:=AxisController.fAcceleration;
		MCMoveVelocity.Deceleration:=AxisController.fDeceleration;
		
		//Simple logic to allow negative velocity inputs rather than having to set the direction object
		IF AxisController.fVelocity>= 0 THEN
			MCMoveVelocity.Velocity:=AxisController.fVelocity;
			MCMoveVelocity.Direction:= MC_Positive_Direction;
		ELSE
			MCMoveVelocity.Velocity:=ABS(AxisController.fVelocity);
			MCMoveVelocity.Direction:= MC_Negative_Direction;
		END_IF
		
		bDone:=MCMoveVelocity.InVelocity;
		AxisController.bBusy:=MCMoveVelocity.Busy;
		
		IF MCMoveVelocity.Error THEN
			AxisController.bError:=TRUE;
			AxisController.iErrorID:=MCMoveVelocity.ErrorID;
		END_IF
		IF NOT MCMoveVelocity.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	eMcCommand.Stop:
		McStop.Execute:=AxisController.bExecute;
		McStop.Deceleration:=AxisController.fDeceleration;
		McStop.Jerk:=0;
		
		bDone:=McStop.Done;
		AxisController.bBusy:=McStop.Busy;
		
		IF MCStop.Error THEN
			AxisController.bError:= TRUE;
			AxisController.iErrorID:=MCStop.ErrorId;
		END_IF
		IF	NOT MCStop.Busy THEN
			eCommandLatched:=eMcCommand.Idle;
		END_IF
		
END_CASE

////////////////////////////////////////// 
//  _____ _        _    ____ ____  		//
// |  ___| |      / \  / ___/ ___| 		//
// | |_  | |     / _ \| |  _\___ \ 		//
// |  _| | |___ / ___ | |_| |___) |		//
// |_|   |_____/_/   \_\____|____/ 		//
//                                		//
//////////////////////////////////////////
AxisController.bMoving:=AxisController.Axis.Status.Moving;	
AxisController.bExecute:=FALSE;

(*
As we never hold Execute high, the done signal from each function block will only stay on for 1 cycle tick
The following logic just uses an SR latch to hold this done signal TRUE until it is cleared either by an error or the axis going busy

Errors are always latched as they are only ever set by a FB error and cleared by a reset command
*)
doneLatch(SET1:=bDone,RESET:=(AxisController.bBusy OR AxisController.bError));
AxisController.bDone:=doneLatch.Q1;]]></ST>
    </Implementation>
    <LineIds Name="FB_AxisDrive">
      <LineId Id="4351" Count="39" />
      <LineId Id="5281" Count="0" />
      <LineId Id="4391" Count="3" />
      <LineId Id="4399" Count="0" />
      <LineId Id="5283" Count="4" />
      <LineId Id="5282" Count="0" />
      <LineId Id="5036" Count="2" />
      <LineId Id="5289" Count="0" />
      <LineId Id="5039" Count="0" />
      <LineId Id="5288" Count="0" />
      <LineId Id="5040" Count="1" />
      <LineId Id="5290" Count="0" />
      <LineId Id="5042" Count="2" />
      <LineId Id="5291" Count="0" />
      <LineId Id="5045" Count="2" />
      <LineId Id="5292" Count="0" />
      <LineId Id="5048" Count="4" />
      <LineId Id="5034" Count="0" />
      <LineId Id="4413" Count="1" />
      <LineId Id="5033" Count="0" />
      <LineId Id="4437" Count="8" />
      <LineId Id="5293" Count="0" />
      <LineId Id="5295" Count="1" />
      <LineId Id="5294" Count="0" />
      <LineId Id="4447" Count="4" />
      <LineId Id="4454" Count="6" />
      <LineId Id="4462" Count="9" />
      <LineId Id="5298" Count="2" />
      <LineId Id="5302" Count="0" />
      <LineId Id="5297" Count="0" />
      <LineId Id="4472" Count="12" />
      <LineId Id="5511" Count="1" />
      <LineId Id="4485" Count="4" />
      <LineId Id="4491" Count="4" />
      <LineId Id="4497" Count="14" />
      <LineId Id="5303" Count="0" />
      <LineId Id="5305" Count="1" />
      <LineId Id="4512" Count="0" />
      <LineId Id="5304" Count="0" />
      <LineId Id="4513" Count="0" />
      <LineId Id="5307" Count="0" />
      <LineId Id="4514" Count="1" />
      <LineId Id="5308" Count="0" />
      <LineId Id="4516" Count="1" />
      <LineId Id="5309" Count="0" />
      <LineId Id="4518" Count="1" />
      <LineId Id="5310" Count="0" />
      <LineId Id="4520" Count="1" />
      <LineId Id="5311" Count="0" />
      <LineId Id="4522" Count="1" />
      <LineId Id="5312" Count="0" />
      <LineId Id="4524" Count="1" />
      <LineId Id="4527" Count="2" />
      <LineId Id="5313" Count="0" />
      <LineId Id="5030" Count="0" />
      <LineId Id="4532" Count="0" />
      <LineId Id="5314" Count="0" />
      <LineId Id="4533" Count="5" />
      <LineId Id="5315" Count="0" />
      <LineId Id="4539" Count="1" />
      <LineId Id="5638" Count="0" />
      <LineId Id="5637" Count="0" />
      <LineId Id="5639" Count="0" />
      <LineId Id="5688" Count="0" />
      <LineId Id="5687" Count="0" />
      <LineId Id="5689" Count="0" />
      <LineId Id="5316" Count="0" />
      <LineId Id="4541" Count="7" />
      <LineId Id="5318" Count="0" />
      <LineId Id="4557" Count="7" />
      <LineId Id="5324" Count="0" />
      <LineId Id="5323" Count="0" />
      <LineId Id="5326" Count="0" />
      <LineId Id="5330" Count="0" />
      <LineId Id="5327" Count="0" />
      <LineId Id="5362" Count="0" />
      <LineId Id="5329" Count="0" />
      <LineId Id="5347" Count="5" />
      <LineId Id="5359" Count="0" />
      <LineId Id="5353" Count="5" />
      <LineId Id="5331" Count="0" />
      <LineId Id="5360" Count="0" />
      <LineId Id="5332" Count="0" />
      <LineId Id="5364" Count="1" />
      <LineId Id="5367" Count="0" />
      <LineId Id="5366" Count="0" />
      <LineId Id="5325" Count="0" />
      <LineId Id="5320" Count="2" />
      <LineId Id="5319" Count="0" />
      <LineId Id="4565" Count="8" />
      <LineId Id="5369" Count="0" />
      <LineId Id="4574" Count="5" />
      <LineId Id="4582" Count="8" />
      <LineId Id="5368" Count="0" />
      <LineId Id="4591" Count="1" />
      <LineId Id="5370" Count="0" />
      <LineId Id="4593" Count="3" />
      <LineId Id="4598" Count="7" />
      <LineId Id="5371" Count="0" />
      <LineId Id="4606" Count="6" />
      <LineId Id="4614" Count="6" />
      <LineId Id="5372" Count="0" />
      <LineId Id="4621" Count="1" />
      <LineId Id="5373" Count="0" />
      <LineId Id="4623" Count="35" />
      <LineId Id="5374" Count="0" />
      <LineId Id="4659" Count="1" />
      <LineId Id="5375" Count="0" />
      <LineId Id="4661" Count="8" />
      <LineId Id="4671" Count="1" />
      <LineId Id="4676" Count="0" />
      <LineId Id="4680" Count="0" />
      <LineId Id="4682" Count="1" />
      <LineId Id="4998" Count="0" />
      <LineId Id="5000" Count="0" />
      <LineId Id="4692" Count="1" />
      <LineId Id="5516" Count="1" />
      <LineId Id="4694" Count="2" />
      <LineId Id="5376" Count="1" />
      <LineId Id="4697" Count="0" />
      <LineId Id="5378" Count="0" />
      <LineId Id="4698" Count="3" />
      <LineId Id="4703" Count="4" />
      <LineId Id="5031" Count="1" />
      <LineId Id="5002" Count="0" />
      <LineId Id="5004" Count="0" />
      <LineId Id="5015" Count="0" />
      <LineId Id="5005" Count="0" />
      <LineId Id="5018" Count="1" />
      <LineId Id="5021" Count="0" />
      <LineId Id="5017" Count="0" />
      <LineId Id="5023" Count="1" />
      <LineId Id="5003" Count="0" />
      <LineId Id="4741" Count="0" />
      <LineId Id="4790" Count="6" />
      <LineId Id="5026" Count="2" />
      <LineId Id="5025" Count="0" />
      <LineId Id="4801" Count="16" />
      <LineId Id="4824" Count="0" />
      <LineId Id="4826" Count="0" />
      <LineId Id="4828" Count="0" />
      <LineId Id="4831" Count="0" />
      <LineId Id="4834" Count="0" />
      <LineId Id="4836" Count="1" />
      <LineId Id="5379" Count="0" />
      <LineId Id="4838" Count="12" />
      <LineId Id="5380" Count="0" />
      <LineId Id="4851" Count="0" />
      <LineId Id="5381" Count="0" />
      <LineId Id="4852" Count="10" />
      <LineId Id="5677" Count="1" />
      <LineId Id="4863" Count="24" />
      <LineId Id="5382" Count="0" />
      <LineId Id="4888" Count="7" />
      <LineId Id="5641" Count="0" />
      <LineId Id="5666" Count="0" />
      <LineId Id="5668" Count="0" />
      <LineId Id="5684" Count="2" />
      <LineId Id="5683" Count="0" />
      <LineId Id="5672" Count="1" />
      <LineId Id="5670" Count="0" />
      <LineId Id="5674" Count="1" />
      <LineId Id="5669" Count="0" />
      <LineId Id="5667" Count="0" />
      <LineId Id="5643" Count="2" />
      <LineId Id="5665" Count="0" />
      <LineId Id="5646" Count="13" />
      <LineId Id="5661" Count="0" />
      <LineId Id="5660" Count="0" />
      <LineId Id="5662" Count="2" />
      <LineId Id="5690" Count="2" />
      <LineId Id="5700" Count="1" />
      <LineId Id="5696" Count="0" />
      <LineId Id="5702" Count="0" />
      <LineId Id="5698" Count="0" />
      <LineId Id="5697" Count="0" />
      <LineId Id="5694" Count="1" />
      <LineId Id="5699" Count="0" />
      <LineId Id="5703" Count="6" />
      <LineId Id="5642" Count="0" />
      <LineId Id="5710" Count="0" />
      <LineId Id="5712" Count="8" />
      <LineId Id="5711" Count="0" />
      <LineId Id="5721" Count="0" />
      <LineId Id="5640" Count="0" />
      <LineId Id="4896" Count="3" />
      <LineId Id="5383" Count="0" />
      <LineId Id="4900" Count="4" />
      <LineId Id="5384" Count="0" />
      <LineId Id="4905" Count="13" />
      <LineId Id="5385" Count="0" />
      <LineId Id="4919" Count="8" />
      <LineId Id="5386" Count="0" />
      <LineId Id="4928" Count="10" />
      <LineId Id="4940" Count="3" />
      <LineId Id="5387" Count="0" />
      <LineId Id="4944" Count="7" />
      <LineId Id="4955" Count="10" />
      <LineId Id="4976" Count="1" />
      <LineId Id="4979" Count="0" />
      <LineId Id="5389" Count="1" />
      <LineId Id="5392" Count="0" />
      <LineId Id="5391" Count="0" />
      <LineId Id="5388" Count="0" />
      <LineId Id="4980" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>